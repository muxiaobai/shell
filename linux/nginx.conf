
user  root;
worker_processes  1;
#每个worker进程都是单线程进程，所以你叫它进程或者线程都行。这个值最大设置
#为系统显示的CPU核心总数-1，当然你超过也行，但是这样就出现CPU的进程切换，影响性能
worker_rlimit_nofile 65535;
#这个参数表示worker进程最多能打开的文件句柄数，基于liunx系统ulimit设置
#查看系统文件句柄数最大值：ulimit -n

if ($time_iso8601 ~ '(\d{4}-\d{2}-\d{2})') {
	set $tttt $1;
}
#error_log  /thglxt/logs/error.log error;
#error_log  /thglxt/logs/error-error-$tttt.log  error;
#第一个参数指定日志的写入位置。
#第二个参数指定日志的级别。level可以是debug, info, notice, warn, error, crit, alert,emerg中的任意值。可以看到其取值范围是按紧急程度从低到高排列的。只有日志的错误级别等于或高于level指定的值才会写入错误日志中。默认值是error。

#pid        logs/nginx.pid;


events {
    use epoll;
    worker_connections  1024;
    #单个后台worker process进程的最大并发链接数 
    # 并发总数是 worker_processes 和 worker_connections 的乘积
    # 即 max_clients = worker_processes * worker_connections
    # 在设置了反向代理的情况下，max_clients = worker_processes * worker_connections / 4  为什么
    # 为什么上面反向代理要除以4，应该说是一个经验值
    # 根据以上条件，正常情况下的Nginx Server可以应付的最大连接数为：4 * 8000 = 32000
    # worker_connections 值的设置跟物理内存大小有关
    # 因为并发受IO约束，max_clients的值须小于系统可以打开的最大文件数
    # 而系统可以打开的最大文件数和内存大小成正比，一般1GB内存的机器上可以打开的文件数大约是10万左右
}


#http配置段，用于定义web服务的一些重要属性，代理、缓存、日志以及其他HTTP有关的特性等。
http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';
    log_format  main  '$remote_addr - $remote_user [$time_local] requesthost:"$http_host"; "$request" requesttime:"$request_time"; '
                      '$status $body_bytes_sent "$http_referer" - $request_body'
                      '"$http_user_agent" "$http_x_forwarded_for"';
    #access_log    off;  #关闭access_log，即不记录访问日志
    access_log  /thglxt/logs/nginx-access-$tttt.log  main;
    error_log  /thglxt/logs/nginx-error-$tttt.log  error;
	
    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;
    #保持长连接的时长默认为65秒，指定客户端连接保持活动的超时时间，超过这个时间服务器就自动断开连接
	#这个选项有2个值 keepalive_timeout ARG1 ARG2；第二参数是可选项，其指定使用keep-alive消息头保持活动连接的有效时间
	#如果不设置第二个参数那么Nginx不会向客户端某些浏览器（如火狐）发送keep-alive消息头以保持活动连接，
	#超时之后客户端就自动断开连接。该参数可以定义在http{}段中，也可以定义在server{}段中、location{}段中

    gzip  on;
    gzip_vary on;
    gzip_buffers 32 4k;
    gzip_comp_level 6;
    gzip_disable：wqable "MSIE [1-6]\.";
    gzip_types text/plain text/css text/javascript application/javascript application/x-javascript application/xml application/vnd.ms-fontobject font/ttf font/opentype font/x-woff image/svg+xml;
    #是否开启gzip功能，也就是在服务器响应客户端是是否把响应数据进行压缩，默认为off
	#这个参数可以设置在在http{}段中、server{}段中、location {}段中
    #gzip  on;
	
	#gzip实现压缩的时候使用缓冲的大小，第一个参数是缓存空间个数，第二个是缓存大小。默认情况下
	#size大小为一个内存页，4K或者8K，取决不同平台。
	#这个参数可以设置在在http{}段中、server{}段中、location {}段中
	#gzip_buffers 32 4k;

	#压缩级别，默认为1，表示压缩程度最低，压缩率高。9表示压缩程度最高，压缩率最低，也最浪费时间。
	#这个参数可以设置在在http{}段中、server{}段中、location {}段中
	#gzip_comp_level 1;

	#对哪种浏览器不压缩，因为有些不支持。
	#这个参数可以设置在在http{}段中、server{}段中、location {}段中
	#gzip_disable msie6;

	#对哪些格式内容使用压缩，默认为text/html，但实际上你开启压缩功能，Nginx会对所有text/html页面进行压缩。
	#gzip_types text/plain text/css application/x-javascript text/xml application/xml application/xml+rss text/javascript application/javascript

	#用于设置在使用压缩功能时，是否发送带有Vary:Accept-Econding头的响应信息。该参数主要是告诉数据接收方，数据经过了压缩
	#开启效果是客户端接收的响应头部中增加了 Accept-Ecoding:gzip的信息。
	#gzip_vary on;

	#内容长度大于多少字节时才压缩，默认20。因为对于数据量大压缩才明显，小数据压缩不明显而且还消耗资源。也就是
	#当响应页面大于该值时才启用压缩。响应页面大小可以通过HTTP响应头中的Content-Length指令获取。不过由于ngx_http_gzip_module
	#通常使用Chunked动态编码压缩，所以Conten-Length或不存在或者被忽略，该指令不起作用。
	#这个参数可以设置在在http{}段中、server{}段中、location {}段中
	#gzip_min_length 20;

	#因为早期的浏览器不支持HTTP客户端不支持压缩，因此用户会看到乱码，可以针对不同HTTP协议版本选择性开启
	#默认是针对http 1.1协议开启。也就是只有客户端使用http 1.1及以上版本的才进行压缩。这个是针对客户端使用
	#的HTTP协议版本做选择性开启的。上面的gzip_disable是针对客户端。
	#这个参数可以设置在在http{}段中、server{}段中、location {}段中
	#gzip_http_version 1.1

	#当开启是，如果客户端浏览器不支持压缩，那么Nginx将返回解压后的数据；如果支持压缩将忽略此选项。
	#gunzip_static on;
	
    # Tomcat Servers
    upstream tomcat-servers
    {
      server 127.0.0.1:8080;
      # server 127.0.0.1:8081;
      # server 127.0.0.1:8082;
      # server 127.0.0.1:8083;
    }

    # Server at port 80
    server
    {
      listen       80;
      server_name  localhost;
      root         /thglxt/web-apps/ROOT;

      charset utf-8;
      access_log  /thglxt/logs/nginx-forp-80.access.log;

      location /css
      {
        expires 1d;
      }

      location /disk-file
      {
        expires 1d;
      }

      location /fonts
      {
        expires 1d;
      }

      location /image
      {
        expires 1d;
      }

      location /js
      {
        expires 1d;
      }

      location /sound
      {
        expires 1d;
      }

      location ~ .*.(htm|html|gif|jpg|jpeg|png|bmp|swf|ico)$
      {
        expires 1d;
      }

      location /
      {
        index index.html;
        proxy_pass http://tomcat-servers;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP  $remote_addr;
        proxy_set_header X-Forwarded-For  $proxy_add_x_forwarded_for;
        proxy_set_header Via "nginx";

        client_max_body_size 1000000m;
        client_body_buffer_size 1024k;
      }
    }



}
